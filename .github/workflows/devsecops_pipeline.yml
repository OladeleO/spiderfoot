name: 'DevSecOps Pipeline'

on:
  push:
    branches:
    - master
    
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  pull_request:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: padsop-cluster-spiderfoot    # TODO: update to cluster name
  GKE_ZONE: europe-west1-b   # TODO: update to cluster zone
  DEPLOYMENT_NAME: spiderfoot-gke-deployment # TODO: update to deployment name
  IMAGE: spiderfoot-img

jobs:        
   
  sast-docker-check:
        runs-on: ubuntu-latest
        name: sast_dockercheck
        steps:
        # Setup gcloud CLI
        - name: Setup gcloud CLI
          uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
          with:
            service_account_key: ${{ secrets.GKE_SA_KEY }}
            project_id: ${{ secrets.GKE_PROJECT }} 
        - run: |-
            gcloud --quiet beta container images describe gcr.io/$PROJECT_ID/spiderfoot-img@sha256:bd9ec10c50452fad3845cd69dc96bf44094442059a252c49c84e9a3fc5a939be --show-package-vulnerability > scanreport.txt
        - uses: actions/upload-artifact@v2
          with:
            path: sast_report.txt
            
            
          
  sensitive-info-check:
    runs-on: ubuntu-latest
    name: sensitive-info-check
    steps:  
    - name: Checkout
      uses: actions/checkout@master
    - name: Check password
      uses: AlicanAkkus/pinder-action@0.1

  dependency-check:
    runs-on: ubuntu-latest
    name: dependency-check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'spiderfoot'
          path: '.'
          format: 'HTML'    
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: dependency-check-report
           path: ${{github.workspace}}/reports


  anchore-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build the Container image
        run: docker build . --file Dockerfile --tag localbuild/spiderfoot-to-scan:latest
      - uses: anchore/scan-action@v3
        id: scan
        with:
          image: "localbuild/spiderfoot-to-scan:latest"
          acs-report-enable: true
      - name: Inspect action SARIF report
        run: cat ${{ steps.scan.outputs.sarif }}
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: anchore-scan-report
           path: ${{github.workspace}}
          

  trivy-scan:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Build the Container image
          run: docker build . --file Dockerfile --tag localbuild/spiderfoot-to-scan:latest

        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            #image-ref: gcr.io/mythic-inn-323010/spiderfoot-img
            image-ref: "localbuild/spiderfoot-to-scan:latest"
            scan-type: 'image'
            ignore-unfixed: true
            #format: 'template'
            format: 'table'
            #template: '@/contrib/sarif.tpl'
            output: 'trivy-results.sarif'
            severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        - name: Inspect action SARIF report
          run: cat ${{ steps.scan.outputs.sarif }}
          
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
        
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
                
 #   - name: sast
 #     uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
 #     with:
 #       service_account_key: ${{ secrets.GKE_SA_KEY }}
 #       project_id: ${{ secrets.GKE_PROJECT }} 
 #   - run: |-
 #       gcloud --quiet beta container images describe "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" --show-package-vulnerability > scanreport.txt
 #   - uses: actions/upload-artifact@v2
 #     with:
 #       name: sast-report
 #       path: '.'
        
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

  compliance-check:
  # This job aims to scan the terraform file for security issue as compliance as code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Test with Checkov
        run: |
          pip install checkov
          checkov -d .

 
  owasp-zap-scan:
    needs: [setup-build-publish-deploy]
    runs-on: ubuntu-latest
    steps: 
    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.4.0
      with:
        target: 'http://34.140.94.36:5009/'  #Address manually entered...
